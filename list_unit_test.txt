1-login from => test both input for email and password ;
2-submtion => test the submtion button ;
3-errors  => test the errors and how can i handle theme ;
4-Auth right ?  or not =>
==========================================================

5- test the api => i will handle this 

==========================================================

example of what i will do for you ==> 



describe('Test case for testing login',() =>{
let wrapper;
test('username check',()=>
{
wrapper = shallow(<Login/>);
wrapper.find('input[type="text"]').simulate('change', {target: {name: 'username', value: 'upwork'}});
expect(wrapper.state('username')).toEqual('krishankantsinghal');
})
it('password check',()=>{
wrapper = shallow(<Login/>);
wrapper.find('input[type="password"]').simulate('change', {target: {name: 'password', value: 'upwork'}});
expect(wrapper.state('password')).toEqual('krishankant123');
})
it('login check with right data',()=>{
wrapper = shallow(<Login/>);
wrapper.find('input[type="text"]').simulate('change', {target: {name: 'username', value: 'upwork'}});
wrapper.find('input[type="password"]').simulate('change', {target: {name: 'password', value: 'upwork'}});
wrapper.find('button').simulate('click');
expect(wrapper.state('isLogined')).toBe(true);
})
it('login check with wrong data',()=>{
wrapper = shallow(<Login/>);
wrapper.find('input[type="text"]').simulate('change', {target: {name: 'username', value: 'upwork'}});
wrapper.find('input[type="password"]').simulate('change', {target: {name: 'password', value: 'upwork'}});
wrapper.find('button').simulate('click');
expect(wrapper.state('isLogined')).toBe(false);
})
})
